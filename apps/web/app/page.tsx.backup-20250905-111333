'use client'

import { useEffect, useState } from 'react'
import EnhancedHeader from '@/components/bloomberg/EnhancedHeader'
import PortfolioChart from '@/components/bloomberg/PortfolioChart'
import MarketDataGrid from '@/components/bloomberg/MarketDataGrid'
import { RefreshCw, TrendingUp, TrendingDown } from 'lucide-react'

export default function Home() {
  const [account, setAccount] = useState<any>(null)
  const [positions, setPositions] = useState<any[]>([])
  const [orders, setOrders] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [lastUpdate, setLastUpdate] = useState(new Date())

  const fetchData = async () => {
    try {
      const [accountRes, positionsRes, ordersRes] = await Promise.all([
        fetch('https://mulroystreetcap.com/api/account'),
        fetch('https://mulroystreetcap.com/api/positions'),
        fetch('https://mulroystreetcap.com/api/orders')
      ])
      
      const accountData = await accountRes.json()
      const positionsData = await positionsRes.json()
      const ordersData = await ordersRes.json()
      
      setAccount(accountData)
      setPositions(positionsData)
      setOrders(ordersData)
      setLastUpdate(new Date())
      setLoading(false)
    } catch (error) {
      console.error('Error fetching data:', error)
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchData()
    const interval = setInterval(fetchData, 10000) // Refresh every 10 seconds
    return () => clearInterval(interval)
  }, [])

  if (loading) {
    return (
      <div className="min-h-screen bg-[#0A0E1A] flex items-center justify-center">
        <RefreshCw className="w-8 h-8 text-gray-400 animate-spin" />
      </div>
    )
  }

  const dailyPL = (account?.equity || 0) - (account?.last_equity || 0)
  const dailyPLPercent = account?.last_equity ? (dailyPL / account.last_equity) * 100 : 0

  return (
    <div className="min-h-screen bg-[#0A0E1A] text-gray-100">
      {/* Enhanced Header with Weather and World Times */}
      <EnhancedHeader />
      
      <div className="p-4 space-y-4">
        {/* Row 1: Live Account Information */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-[#141824] border border-gray-700 rounded p-4">
            <div className="text-xs text-gray-400 uppercase tracking-wide mb-1">Portfolio Value</div>
            <div className="text-2xl font-bold font-mono">
              ${account?.equity?.toLocaleString('en-US', { minimumFractionDigits: 2 }) || '0.00'}
            </div>
            <div className={`text-sm font-mono mt-1 flex items-center gap-1 ${dailyPL >= 0 ? 'text-green-400' : 'text-red-400'}`}>
              {dailyPL >= 0 ? <TrendingUp className="w-3 h-3" /> : <TrendingDown className="w-3 h-3" />}
              {dailyPL >= 0 ? '+' : ''}{dailyPL.toFixed(2)} ({dailyPLPercent >= 0 ? '+' : ''}{dailyPLPercent.toFixed(2)}%)
            </div>
          </div>
          
          <div className="bg-[#141824] border border-gray-700 rounded p-4">
            <div className="text-xs text-gray-400 uppercase tracking-wide mb-1">Cash Available</div>
            <div className="text-2xl font-bold font-mono">
              ${account?.cash?.toLocaleString('en-US', { minimumFractionDigits: 2 }) || '0.00'}
            </div>
          </div>
          
          <div className="bg-[#141824] border border-gray-700 rounded p-4">
            <div className="text-xs text-gray-400 uppercase tracking-wide mb-1">Buying Power</div>
            <div className="text-2xl font-bold font-mono">
              ${account?.buying_power?.toLocaleString('en-US', { minimumFractionDigits: 2 }) || '0.00'}
            </div>
          </div>
          
          <div className="bg-[#141824] border border-gray-700 rounded p-4">
            <div className="text-xs text-gray-400 uppercase tracking-wide mb-1">Open Positions</div>
            <div className="text-2xl font-bold font-mono">
              {positions?.length || 0}
            </div>
            <div className="text-xs text-gray-500 mt-1">
              {account?.daytrade_count || 0}/3 day trades
            </div>
          </div>
        </div>

        {/* Row 2: Portfolio Chart */}
        <div className="bg-[#141824] border border-gray-700 rounded p-4">
          <PortfolioChart data={[]} />
        </div>

        {/* Row 3: Live Market Data */}
        <div>
          <h2 className="text-sm text-gray-400 uppercase tracking-wide mb-3">Live Market Data</h2>
          <MarketDataGrid />
        </div>

        {/* Current Positions (if any) */}
        {positions && positions.length > 0 && (
          <div className="bg-[#141824] border border-gray-700 rounded p-4">
            <h2 className="text-sm text-gray-400 uppercase tracking-wide mb-3">Current Positions</h2>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b border-gray-700">
                    <th className="text-left py-2 text-gray-400">Symbol</th>
                    <th className="text-right py-2 text-gray-400">Qty</th>
                    <th className="text-right py-2 text-gray-400">Current</th>
                    <th className="text-right py-2 text-gray-400">Value</th>
                    <th className="text-right py-2 text-gray-400">P&L</th>
                  </tr>
                </thead>
                <tbody>
                  {positions.map((pos: any) => (
                    <tr key={pos.symbol} className="border-b border-gray-800">
                      <td className="py-2 font-mono">{pos.symbol}</td>
                      <td className="text-right py-2 font-mono">{pos.qty}</td>
                      <td className="text-right py-2 font-mono">${pos.current_price?.toFixed(2)}</td>
                      <td className="text-right py-2 font-mono">${pos.market_value?.toFixed(2)}</td>
                      <td className={`text-right py-2 font-mono ${pos.unrealized_pl >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                        ${pos.unrealized_pl?.toFixed(2)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center text-xs text-gray-500 py-4 border-t border-gray-800">
          Last Update: {lastUpdate.toLocaleTimeString()} | 
          <button onClick={fetchData} className="ml-2 hover:text-white inline-flex items-center gap-1">
            <RefreshCw className="w-3 h-3" /> Refresh
          </button>
        </div>
      </div>
    </div>
  )
}