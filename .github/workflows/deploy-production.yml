name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_engine:
        description: 'Deploy Trading Engine'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  AZURE_RESOURCE_GROUP: rg-alpaca-trader-prod
  AZURE_LOCATION: eastus2
  ACR_NAME: acralpacatrader
  CONTAINER_APP_ENV: alpaca-trader-env
  
jobs:
  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}

  # Python tests
  test-python:
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alpaca_trader_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: Run linting
        run: |
          ruff check .
          mypy --strict apps/ packages/
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/alpaca_trader_test
          REDIS_URL: redis://localhost:6379
          APCA_API_KEY_ID: ${{ secrets.APCA_API_KEY_ID }}
          APCA_API_SECRET_KEY: ${{ secrets.APCA_API_SECRET_KEY }}
        run: |
          pytest tests/ -v --cov=apps --cov=packages --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Build and push API
  build-api:
    runs-on: ubuntu-latest
    needs: test-python
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Log in to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.ACR_NAME }}.azurecr.io/alpaca-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/alpaca-api:buildcache
          cache-to: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/alpaca-api:buildcache,mode=max
          build-args: |
            VERSION=${{ github.sha }}

  # Build and push Engine (only if enabled)
  build-engine:
    runs-on: ubuntu-latest
    needs: test-python
    if: github.event.inputs.deploy_engine == 'true' || github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Log in to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
      
      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.ACR_NAME }}.azurecr.io/alpaca-engine
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Engine image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/engine/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/alpaca-engine:buildcache
          cache-to: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/alpaca-engine:buildcache,mode=max

  # Build and deploy Web UI
  build-web:
    runs-on: ubuntu-latest
    needs: test-python
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: apps/web/pnpm-lock.yaml
      
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Install dependencies
        working-directory: apps/web
        run: pnpm install --frozen-lockfile
      
      - name: Run web tests
        working-directory: apps/web
        run: pnpm test
      
      - name: Build web app
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: https://api-alpaca.azurecontainer.io
        run: pnpm build
      
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "apps/web"
          output_location: "out"

  # Deploy API to Azure Container Apps
  deploy-api:
    runs-on: ubuntu-latest
    needs: [build-api, build-web]
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy API to Container Apps
        run: |
          az containerapp update \
            --name alpaca-api \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/alpaca-api:${{ github.sha }} \
            --set-env-vars \
              DATABASE_URL=secretref:database-url \
              REDIS_URL=secretref:redis-url \
              JWT_SECRET=secretref:jwt-secret \
              INTERNAL_API_KEY=secretref:internal-api-key \
            --revision-suffix ${{ github.run_number }} \
            --traffic-weight latest=100

  # Deploy Engine (with manual approval)
  deploy-engine:
    runs-on: ubuntu-latest
    needs: build-engine
    if: github.event.inputs.deploy_engine == 'true'
    environment: production-engine
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Engine to Container Apps
        run: |
          az containerapp update \
            --name alpaca-engine \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/alpaca-engine:${{ github.sha }} \
            --set-env-vars \
              APCA_API_KEY_ID=secretref:apca-key-id \
              APCA_API_SECRET_KEY=secretref:apca-secret-key \
              DATABASE_URL=secretref:database-url \
              REDIS_URL=secretref:redis-url \
              ENGINE_ID=engine-prod-001 \
              REQUIRE_CONFIRMATION=false \
            --revision-suffix ${{ github.run_number }} \
            --traffic-weight latest=10 previous=90
      
      - name: Health check
        run: |
          sleep 30
          # Check engine health
          HEALTH=$(az containerapp show \
            --name alpaca-engine \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.latestRevisionReplicas" -o tsv)
          
          if [ "$HEALTH" -eq "0" ]; then
            echo "Engine deployment failed - rolling back"
            az containerapp revision set-mode \
              --name alpaca-engine \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --mode single
            exit 1
          fi
      
      - name: Gradual traffic shift
        run: |
          # Wait 5 minutes then shift more traffic
          sleep 300
          
          az containerapp update \
            --name alpaca-engine \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --traffic-weight latest=50 previous=50
          
          # Wait another 5 minutes then complete
          sleep 300
          
          az containerapp update \
            --name alpaca-engine \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --traffic-weight latest=100

  # Smoke tests
  smoke-test:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-engine]
    if: always()
    
    steps:
      - name: Test API health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api-alpaca.azurecontainer.io/api/health)
          if [ $response -ne 200 ]; then
            echo "API health check failed"
            exit 1
          fi
      
      - name: Test Web UI
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://app.mulroystreet.capital)
          if [ $response -ne 200 ]; then
            echo "Web UI check failed"
            exit 1
          fi